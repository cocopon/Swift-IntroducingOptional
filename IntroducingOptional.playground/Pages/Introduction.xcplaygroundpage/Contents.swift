//: [トップ](Top) | [前のページ](@previous)


//: # はじめに
//: ## なぜOptionalが必要なのか？
// Objective-CからSwiftに移行したばかりの人は、思うようにコードが書けず、イライラすることも多いと思います
// 「なんでこう…Swiftは『!』だの『?』だの、うるさく警告してくるんだろう？」
// 「Objective-Cなら謎の記号なんかなしに、シンプルに書けるのに！」


//: ## nilに寛容すぎるObjective-C
// Objective-Cの世界では、どんなオブジェクトにもnilを入れられました
//: - example: `NSString *emptyMessage = nil;`


// 中身がnilの場合には、何か操作しても何も起こりません
//: - example: `[emptyMessage stringByAppendingString:@"world"];`
// -> (何も起きない)


// この性質は便利でもあり、不便でもあります
// もしnilを意図しないケースで、ここにたどり着いてしまったら？
// この行は何事も起きずに通過しますが、たまたま運がよかっただけです
// そのあとの処理もうまくいく保証はあるのでしょうか？


// 渡ってくる値がnilだった場合の対処を、すべて網羅しきれるでしょうか？


//: ## nilの対処漏れを言語レベルで防ぐのがOptional
// 中身が入っていると信じているそのオブジェクトは、本当に空ではないだろうか？
// 頻繁に起こりうる「nilの対処漏れ」を、言語設計のレベルで助けてくれるのがOptionalです
// 「!」をつけなさい、「?」をつけなさいなど、やたらうるさい謎の警告たちは、nilの対処漏れを防ぐために厳しめに設けられたルールだったのです


// 次のページから具体的なコードを見ていきましょう


//: [次のページ](@next)
